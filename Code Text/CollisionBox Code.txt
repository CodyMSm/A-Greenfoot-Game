import greenfoot.*;  // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)
import java.io.Serializable;

/**
 * Write a description of class CollisionBox here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class CollisionBox extends Actor implements Serializable
{
    int speed = 4;
    
    int upVelocity = 0;
    int downVelocity = 0;
    int leftVelocity = 0;
    int rightVelocity = 0;
    
    int x;
    int y;
    
    int mouseX = 0;
    int mouseY = 0;
    boolean mouseDown = false;
    boolean mouseUsed = false;
    
    long lastAdded = System.currentTimeMillis();
    long lastAdded2 = System.currentTimeMillis();
    
    int gravitationalVelocity = 0;
    
    int distancePrediction = 0;
    
    boolean gravityOn = true;
    boolean inMotion = false;
    boolean visisble = true;
    
    boolean onGround = false;
    boolean onCeiling = false;
    boolean barrierOnRight = false;
    boolean barrierOnLeft = false;
    boolean inObject = false;
    
    boolean dangerous = false;
    boolean draggable = false;
    
    Actor actor = new Enemy();
    public CollisionBox(){
    }
    public void setBoxSize(Actor actor){
        this.actor = actor;
        if (actor == new Enemy()){
            dangerous = true;
        }
    }
    public void setUpVelocity(int upVelocity){
        this.upVelocity = upVelocity;
    }
    public void setDownVelocity(int downVelocity){
        this.downVelocity = downVelocity;
    }
    public void setLeftVelocity(int leftVelocity){
        this.leftVelocity = leftVelocity;
    }
    public void setRightVelocity(int rightVelocity){
        this.rightVelocity = rightVelocity;
    }
    public void setGravityOn(boolean gravityOn){
        this.gravityOn = gravityOn;
    }
    public void inMotion(boolean inMotion){
        this.inMotion = inMotion;
    }
    public void setVisible(boolean visisble){
        this.visisble = visisble;
    }
    public void setDraggable(boolean draggable){
        this.draggable = draggable;
    }
    
    public boolean getBarrierOnRight(){
        return barrierOnRight;
    }
    public boolean getBarrierOnLeft(){
        return barrierOnLeft;
    }
    public boolean getOnGround(){
        return onGround;
    }
    public boolean getInObject(){
        return inObject;
    }
    
    public void act()
    {
        if (((MyWorld)getWorld()).paused == false) {
            int x = getX();
            int y = getY();
            
            int platformX;
            int platformY;
            int platformImageHeight = getWorld().getObjects(Platform.class).get(0).platformImageHeight;
            int platformImageWidth = getWorld().getObjects(Platform.class).get(0).platformImageWidth;
            
            long curTime  = System.currentTimeMillis();
            
            int edgeX = getX();
            int edgeY = getY(); 
            
            int mouseYDistance = 100;
            int mouseXDistance = 100;
            boolean noObstacles = true;
            // set size
            GreenfootImage image = getImage();
            image.scale(actor.getImage().getWidth(), actor.getImage().getHeight());
            setImage(image);
            
            // Allows this actor to be moved by the mouse
            MouseInfo mouse = Greenfoot.getMouseInfo();
            Object[] platformObstacles = getObjectsInRange(0, Platform.class).toArray();
            if(mouse != null) { // May be null if the mouse is outside of the world bounds
                mouseX = mouse.getX();
                mouseY = mouse.getY();
            }
            if(Greenfoot.mousePressed(this)) {
                mouseDown = true;
            }
            else if(Greenfoot.mouseClicked(null)) {
                mouseDown = false;
            }
            if ((Greenfoot.mouseDragged(this) == true || Greenfoot.mousePressed(this) == true || mouseDown == true) && draggable == true){
                if (mouseY > y && mouseYDistance < mouseY){
                    mouseYDistance = downVelocity + (mouseY - y);
                } else if (y > mouseY && mouseYDistance < y){
                    mouseYDistance = upVelocity + (y - mouseY);
                } else {
                    mouseYDistance = 100;
                }
                if (mouseX > x && mouseXDistance < mouseX){
                    mouseXDistance = rightVelocity + (mouseX - x);
                } else if (x > mouseX && mouseXDistance < x){
                    mouseXDistance = leftVelocity + (x - mouseX);
                } else {
                    mouseXDistance = 100;
                }
                if (Math.abs(mouseYDistance) > 0 || Math.abs(mouseXDistance) > 0){
                    if (Math.abs(mouseXDistance) >= Math.abs(mouseYDistance)){
                        platformObstacles = getObjectsInRange(Math.abs(mouseXDistance), Platform.class).toArray();
                    } else if (Math.abs(mouseXDistance) <= Math.abs(mouseYDistance)){
                        platformObstacles = getObjectsInRange(Math.abs(mouseYDistance), Platform.class).toArray();
                    }
                    for (int i = 0; i < platformObstacles.length; i++){
                        Actor object = (Actor) platformObstacles[i];
                        if (((mouseX > (object.getX() - object.getImage().getWidth()/2) && mouseX > x) || (mouseX < (object.getX() + object.getImage().getWidth()/2) && mouseX < x)) && 
                            ((mouseY > (object.getY() - object.getImage().getHeight()/2) && mouseY > y) || (mouseY < (object.getY() + object.getImage().getHeight()/2) && mouseY < y)) || 
                            barrierOnLeft == true || barrierOnRight == true || onGround == true || onCeiling == true){
                            setLocation(x, y);
                            noObstacles = false;
                        } else if (((mouseX > (object.getX() - object.getImage().getWidth()/2) && mouseX > x) || (mouseX < (object.getX() + object.getImage().getWidth()/2) && mouseX < x)) || 
                            ((mouseY > (object.getY() - object.getImage().getHeight()/2) && mouseY > y) || (mouseY < (object.getY() + object.getImage().getHeight()/2) && mouseY < y)) || 
                            barrierOnLeft == true || barrierOnRight == true || onGround == true || onCeiling == true){
                            if (((mouseX > (object.getX() - object.getImage().getWidth()/2) && mouseX > x) || (mouseX < (object.getX() + object.getImage().getWidth()/2) && mouseX < x)) || (barrierOnLeft == true || barrierOnRight == true)){
                                setLocation(mouseX, y);
                                noObstacles = false;
                            }
                            if (((mouseY > (object.getY() - object.getImage().getHeight()/2) && mouseY > y) || (mouseY < (object.getY() + object.getImage().getHeight()/2) && mouseY < y)) || (onGround == true || onCeiling == true)){
                                setLocation(mouseX, y);
                                noObstacles = false;
                            }
                        }
                    }
                    
                    if (noObstacles == true){
                        setLocation(mouseX, mouseY);
                        mouseXDistance = 100;
                        mouseYDistance = 100;
                    }
                } else {
                    noObstacles = false;
                    mouseXDistance = 100;
                    mouseYDistance = 100;
                }
                
                gravityOn = false;
                mouseUsed = true; 
            } else if (Greenfoot.mouseDragged(this) == false && Greenfoot.mousePressed(this) == false && mouseDown == false){
                if (mouseUsed == true){
                    if (mouseY > y){
                        downVelocity = downVelocity + (mouseY - y);
                    } else if (y > mouseY){
                        upVelocity = upVelocity + (y - mouseY);
                    }
                    if (mouseX > x){
                        rightVelocity = rightVelocity + (mouseX - x);
                    } else if (x > mouseX){
                        leftVelocity = leftVelocity + (x - mouseX);
                    }
                }
                mouseXDistance = 100;
                mouseYDistance = 100;
                mouseUsed = false;
                gravityOn = true;
            }
            
            
            if (getOneIntersectingObject(Platform.class) != null){
                inObject = true;
            } else {
                inObject = false;
            }
            
            
            // movement
            if (inMotion == true || onGround == false){
                // loses jump momentum
                if (curTime >= lastAdded2 + 100) //1000ms = 1s
                {
                    int i = 1;
                    if (upVelocity > 0){
                        upVelocity = upVelocity - i;
                        i++;
                    }
                }
                // gravity
                if (gravityOn == true){
                    if (getOneIntersectingObject(Platform.class) == null && onGround == false && upVelocity == 0){
                        int i = 1;
                        if (curTime >= lastAdded + 100) //1000ms = 1s
                        {
                            gravitationalVelocity = gravitationalVelocity + i;
                            i++;
                        }
                    } else {
                            gravitationalVelocity = 0;
                    }
                } else {
                    gravitationalVelocity = 0;
                }
                setLocation(getX() + rightVelocity - leftVelocity, getY() + downVelocity - upVelocity + gravitationalVelocity);
            }
            
            // collision (sets location)
            if (getOneIntersectingObject(Platform.class) != null || getOneIntersectingObject(CollisionBox.class) != null || isAtEdge() == true){
                inObject = true;
                gravitationalVelocity = 0;
                Object[] platformObjectArray = getIntersectingObjects(Platform.class).toArray();
                Object[] boxObjectArray = getIntersectingObjects(CollisionBox.class).toArray();
                
                for (int i = 0; i < platformObjectArray.length; i++){
                    Actor object = (Actor) platformObjectArray[i];
                    platformX = object.getX();
                    platformY = object.getY();
                    
                    edgeX = getX();
                    edgeY = getY();
                    if (x <= platformX && (Math.abs(object.getY() - y) < Math.abs(object.getX() - x))){
                        edgeX = platformX - ((object.getImage().getWidth())/2 + getImage().getWidth()/2);
                        rightVelocity = 0;
                    }
                    if (x >= platformX && (Math.abs(object.getY() - y) < Math.abs(object.getX() - x))){
                        edgeX = platformX + ((object.getImage().getWidth())/2 + getImage().getWidth()/2);
                        leftVelocity = 0;
                    }
                    if (y <= platformY && (Math.abs(object.getY() - y) > Math.abs(object.getX() - x))){
                        edgeY = platformY - ((object.getImage().getHeight())/2 + getImage().getHeight()/2);
                        downVelocity = 0;
                    }
                    if (y >= platformY && (Math.abs(object.getY() - y) > Math.abs(object.getX() - x))){
                        edgeY = platformY + ((object.getImage().getHeight())/2 + getImage().getHeight()/2);
                        upVelocity = 0;
                    }
                    setLocation(edgeX, edgeY);
                    // System.out.println("Setting location... " + i);
                }
                for (int i = 0; i < boxObjectArray.length; i++){
                    Actor object = (Actor) boxObjectArray[i];
                    int boxX = object.getX();
                    int boxY = object.getY();
                    
                    edgeX = getX();
                    edgeY = getY();
                    if (x <= boxX && (Math.abs(object.getY() - y) < Math.abs(object.getX() - x))){
                        edgeX = boxX - ((object.getImage().getWidth())/2 + getImage().getWidth()/2);
                        rightVelocity = 0;
                    }
                    if (x >= boxX && (Math.abs(object.getY() - y) < Math.abs(object.getX() - x))){
                        edgeX = boxX + ((object.getImage().getWidth())/2 + getImage().getWidth()/2);
                        leftVelocity = 0;
                    }
                    if (y <= boxY && (Math.abs(object.getY() - y) > Math.abs(object.getX() - x))){
                        edgeY = boxY - ((object.getImage().getHeight())/2 + getImage().getHeight()/2);
                        downVelocity = 0;
                    }
                    if (y >= boxY && (Math.abs(object.getY() - y) > Math.abs(object.getX() - x))){
                        edgeY = boxY + ((object.getImage().getHeight())/2 + getImage().getHeight()/2);
                        upVelocity = 0;
                    }
                    setLocation(edgeX, edgeY);
                    // System.out.println("Setting location... " + i);
                } 
                
                if (x == 0){
                    leftVelocity = 0;
                }
                if (x == 1190){
                    rightVelocity = 0;
                }
                if (y == 0){
                    upVelocity = 0;
                }
                if (y == 799){
                    downVelocity = 0;
                    //System.out.println("y");
                }
                
                inObject = false;
            } else {
                inObject = false;
            }
            
            // detects if the player is on the ground or on a wall
            Object[] objectArray2 = getObjectsInRange(platformImageHeight, Platform.class).toArray();
            Object[] objectArray4 = getObjectsInRange(getImage().getHeight() + (getImage().getHeight()/2), CollisionBox.class).toArray();
            if (objectArray2.length > 0 || objectArray4.length > 0){
                int count1 = 0;
                int count2 = 0;
                int count3 = 0;
                int count4 = 0;
                for (int i = 0; i < objectArray4.length; i++){
                    Actor boxObject = (Actor) objectArray4[i];
                    
                    // System.out.println("Object in question: " + object);
                    if (y == (boxObject.getY() - ((boxObject.getImage().getHeight())/2 + getImage().getHeight()/2))){
                        if (gravitationalVelocity == 0){
                            onGround = true;
                            count1++;
                        }
                    }
                    if (count1 == 0){
                        onGround = false;
                    }
                    
                    if (y == (boxObject.getY() + ((boxObject.getImage().getHeight())/2 + getImage().getHeight()/2))){
                        if (gravitationalVelocity == 0){
                            onCeiling = true;
                            count4++;
                        }
                    }
                    if (count4 == 0){
                        onCeiling = false;
                    }
                    
                    if (x == (boxObject.getX() - ((boxObject.getImage().getWidth())/2 + getImage().getWidth()/2))){
                        barrierOnRight = true;
                        count2++;
                    }
                    if (count2 == 0){
                        barrierOnRight = false;
                    }
                    
                    if (x == (boxObject.getX() + ((boxObject.getImage().getWidth())/2 + getImage().getWidth()/2))){
                        barrierOnLeft = true;
                        count3++;
                    }
                    if (count3 == 0){
                        barrierOnLeft = false;
                    }
                    // System.out.println("On Ground? " + onGround);
                }
                for (int i = 0; i < objectArray2.length; i++){
                    Actor object = (Actor) objectArray2[i];
                    // System.out.println("Object in question: " + object);
                    platformX = object.getX();
                    platformY = object.getY();
                    if ((y == (platformY - ((object.getImage().getHeight())/2 + getImage().getHeight()/2)))){
                        if (gravitationalVelocity == 0){
                            onGround = true;
                            count1++;
                        }
                    }
                    if (count1 == 0){
                        onGround = false;
                    }
                    
                    if (y == (platformY + ((object.getImage().getHeight())/2 + getImage().getHeight()/2))){
                        if (gravitationalVelocity == 0){
                            onCeiling = true;
                            count4++;
                        }
                    }
                    if (count4 == 0){
                        onCeiling = false;
                    }
                    
                    if (x == (platformX - ((object.getImage().getWidth())/2 + getImage().getWidth()/2))){
                        barrierOnRight = true;
                        count2++;
                    }
                    if (count2 == 0){
                        barrierOnRight = false;
                    }
                    
                    if (x == (platformX + ((object.getImage().getWidth())/2 + getImage().getWidth()/2))){
                        barrierOnLeft = true;
                        count3++;
                    }
                    if (count3 == 0){
                        barrierOnLeft = false;
                    }
                    // System.out.println("On Ground? " + onGround);
                }
            } else {
                onGround = false;
                barrierOnRight = false;
                barrierOnLeft = false;
            }
            
            visibility();
        }
    }
    
    public void visibility(){
        if (visisble == false){
            GreenfootImage picture = new GreenfootImage("Transparent Texture.png");
            picture.scale(actor.getImage().getWidth(), actor.getImage().getHeight());
            setImage(picture);
        } else {
            setImage("Collision Box.png");
            GreenfootImage picture = getImage();
            picture.scale(actor.getImage().getWidth(), actor.getImage().getHeight());
            setImage(picture);
        }
    }
}
